version: 2.1

executors:
  builder:
    machine: true
  deployer:
    docker:
      - image: minepicco/cc-build-image:latest

workflows:
  version: 2.1
  
  build-deploy:
    jobs:
      - build_scan:
          context: webpage_deployment
      - hold:
          type: approval
          requires:
            - build_scan
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - hold
          context: webpage_deployment
          filters:
            branches:
              only: master


jobs:
  build_scan:
    executor: builder
    
    environment:
      imagename: "minepicco"
      
    steps:
      - checkout
                     
      - run:
          name: Build Image
          command: |
            docker login -u $docker_user -p $docker_pass
            docker build --tag "${imagename}/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_BUILD_NUM}" .

      - run:
          name: "simple test"
          command: |
            docker run --rm --name web -p 80:80 -d "${imagename}/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_BUILD_NUM}"
            sleep 1 && curl http://localhost
            docker stop web

      - run:
          name: "Twistlock Vuln/Compliance check"
          command: |
            curl -k -u "${pc_user}:${pc_pass}" --output twistcli "${pc_url}/api/v1/util/twistcli" 
            chmod a+x twistcli
            sudo ./twistcli images scan --address "${pc_url}" -u "${pc_user}" -p "${pc_pass}" "${imagename}/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_BUILD_NUM}" --details

      - run:
          name: "Triage vulnerabilities"
          command: |            
            app_name="CCI_Build_${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM}"
            aapp_priority="H"
            curl -k -u "${pc_user}:${pc_pass}" -H "Content-Type: application/json" "${pc_url}/api/v1/scans?search=${imagename}/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_BUILD_NUM}" | jq -r '[ .[].entityInfo ]' > "${CIRCLE_BUILD_NUM}_ci_scan.json"
            echo "LeanSeeksのアップロードURLを情報取得中"
            cred=`curl -X "GET" "${ls_url}/api/vulnerability-scan-results/upload-destination" -H "accept: application/json" -H "Accept-Language: ja" -H "Authorization: Bearer ${ls_token}" -H "${ua}"`
            s3_url=`echo "${cred}" | jq .uploadDestination.url | sed -e 's/\"//g'`
            s3_jwt=`echo "${cred}" | jq .uploadDestination.key | sed -e 's/\"//g'`
            echo "ホスト名は: ${s3_url}"
            echo "JWTは: ${s3_jwt}"
            echo "LeanSeeksのアップロードデータを生成中"
            vuln_data='[{"id": "'${CIRCLE_BUILD_NUM}'_ci_scan","scanner": 0,"payload":'
            vuln_data+=$(cat "${CIRCLE_BUILD_NUM}_ci_scan.json")
            vuln_data+="}]"
            echo "データをLeanSeeksにアップロード中"
            echo "${vuln_data}" > vuln_data.json
            echo "ホスト名は: ${s3_url}"
            curl -X 'PUT' "${s3_url}" --data-binary @vuln_data.json
            echo "トリアージリクエストパラメーターの準備中"
            param='{"application_name":"'${app_name}'","importance":"'${app_priority}'","is_template":false,"pods":'
            param+=`jq -R -s -f mapping.jq params.csv | jq -r -c '[.[] |select(.pod_name != null and .is_root != "is_root" )]'| sed -e 's/"¥r"//g'`"}"
            echo $param | sed 's/"TRUE"/true/g' | sed -e 's/"FALSE"/false/g' | sed -e 's/\r//g'> "param.json"
            echo "トリアージリクエスト実行中"
            curl -X 'POST' "${ls_url}/api/triage-requests" -H 'accept: application/json' -H 'Accept-Language: ja' -H "Vulnerability-Scan-Result-Resource-Id: ${s3_jwt}" -H "Authorization: Bearer ${ls_token}" -H 'Content-Type: application/json' -H "${ua}" -d @param.json > result.json
            triage_id=$(cat result.json | jq -r ".triage.triageId")
            i=1
            while true
            do
              echo "処理待ち_${i}"
              curl -X 'GET' "${ls_url}/api/triage-results/${triage_id}/status" -H 'accept: application/json' -H 'Accept-Language: ja' -H "Authorization: Bearer ${ls_token}" -H 'Content-Type: application/json' -H "$ua" -o t_result.json
              status=$(cat t_result.json | jq -r ".triage.status")
              echo "statusは「${status}」です"
              if [ "${status}" == "成功" ]; then
                cat t_result.json | jq -r ".triage"
                exit 0
              fi
              sleep 10
              i=$((i+1))
            done

      - run:
          name: Publish Image
          command: |
            docker login -u "${docker_user}" -p "${docker_pass}"
            docker tag $imagename"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_BUILD_NUM $imagename"/"$CIRCLE_PROJECT_REPONAME":latest"
            docker push $imagename"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_BUILD_NUM 
            docker push $imagename"/"$CIRCLE_PROJECT_REPONAME":latest"

      - run:
          name: Slack Notification
          command: |
            curl -X POST -d 'payload={"attachments": [{"text": "ビルドのスキャンが完了しました！'$CIRCLE_BUILD_URL'"}]}' $wh_url

  deploy:
    executor: deployer
    environment:
      comp: "low"
      imagename: "minepicco"
      
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Configure gcloud cli
          command: |
            echo $key>key.json
            gcloud auth activate-service-account --key-file=key.json
            gcloud beta container clusters get-credentials $cluster --region $region --project $project
            
      - run:
          name: Create Kubernetes Manifest
          command: |
            deploy_image=$imagename"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_PREVIOUS_BUILD_NUM
            cat manifest_template.yaml > web.yaml
            echo "          image: "$deploy_image >> web.yaml

      - run:
          name: deployment
          command: |
            kubectl apply -f web.yaml
            kubectl get pods
